version: '3.9'
services:
  kong-db:
    image: postgres:latest
    container_name: kong-db
    hostname: kong-db
    networks:
      - project
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - postgres_data:/var/lib/postgresql/data

    
  kong-migrations:
    image: kong
    command: kong migrations bootstrap
    container_name: kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - project
    depends_on:
      kong-db:
        condition: service_healthy
  
  kong:
    image: kong
    container_name: kong
    hostname: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001,0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - project 
    
  konga:
    hostname: konga
    image: pantsel/konga
    ports:
      - "1337:1337"
    container_name: konga
    environment:
      - NODE_ENV=production

    networks:
      - project

  echoserver:
    hostname: echoserver
    image: ealen/echo-server
    networks:
      - project

  mongodb-user:
    image: mongo:latest
    hostname: mongo-user
    volumes:
      - mongodb_data_user:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project
  
  user-microservice:
    build: ./user-microservice
    hostname: user-microservice
    environment:
      MONGO_URL: mongodb://mongo-user:27017/
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project

  mongodb-product:
    image: mongo:latest
    hostname: mongo-product
    volumes:
      - mongodb_data_product:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project

  product-microservice:
    build: ./product-microservice
    hostname: product-microservice
    environment:
      MONGO_URL: mongodb://mongo-product:27017/
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project
  
  mongodb-order:
    image: mongo:latest
    hostname: mongo-order
    volumes:
      - mongodb_data_order:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project

  order-microservice:
    build: ./order-microservice
    hostname: order-microservice
    environment:
      MONGO_URL: mongodb://mongo-order:27017/
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - project


  

networks:
  project:
    driver: bridge


volumes:
  postgres_data:
  mongodb_data_user:
  mongodb_data_product:
  mongodb_data_order:
